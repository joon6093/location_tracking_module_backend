#spring.application.name=gateway
spring:
  cloud:
    gateway:
      routes:
        - id: aggregation
          uri: http://localhost:80
          predicates:
            - Path=/api/aggregation/**
          filters:
            - name: ApiRateLimiter
              args:
                contextResolver: "#{@apiRateContextResolver}"
                rateLimiter: "#{@apiKeyRateLimiter}"
                requestedTokens: 100
                notAllowedStatus: TOO_MANY_REQUESTS
#                denyEmptyKey: true
                emptyKeyStatus: UNAUTHORIZED
        - id: aggregation-ping
          uri: http://localhost:80
          predicates:
            - Path=/api/aggregation/ping
          filters:
            - name: ApiRateLimiter
              args:
                contextResolver: "#{@apiRateContextResolver}"
                rateLimiter: "#{@apiKeyRateLimiter}"
                requestedTokens: 100
                notAllowedStatus: TOO_MANY_REQUESTS
                denyEmptyKey: false
                emptyKeyStatus: UNAUTHORIZED
        - id: route1
          uri: http://localhost:8000
          predicates:
            - Path=/test/**
          filters:
            - name: ApiRateLimiter
              args:
                contextResolver: "#{@apiRateContextResolver}"
                rateLimiter: "#{@apiKeyRateLimiter}"
                requestedTokens: 100
                notAllowedStatus: TOO_MANY_REQUESTS
                denyEmptyKey: true
                emptyKeyStatus: UNAUTHORIZED
  kafka:
    producer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
logging:
  level:
    root: debug